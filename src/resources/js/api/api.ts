/* tslint:disable */
/* eslint-disable */
/**
 * Swagger CheerPay
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DeleteBusinessOperatorFileRequest
 */
export interface DeleteBusinessOperatorFileRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteBusinessOperatorFileRequest
     */
    'filePath': string;
}
/**
 * 
 * @export
 * @interface DeleteBusinessOperatorStaffStaffIdProfileImageRequest
 */
export interface DeleteBusinessOperatorStaffStaffIdProfileImageRequest {
    /**
     * 
     * @type {OrderEnum}
     * @memberof DeleteBusinessOperatorStaffStaffIdProfileImageRequest
     */
    'order': OrderEnum;
}


/**
 * 
 * @export
 * @interface GetAllStaffStaffIdPromptsPromptId200Response
 */
export interface GetAllStaffStaffIdPromptsPromptId200Response {
    /**
     * ChatGPTレスポンス
     * @type {string}
     * @memberof GetAllStaffStaffIdPromptsPromptId200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetAllTipsTipIdPromptsPromptId200Response
 */
export interface GetAllTipsTipIdPromptsPromptId200Response {
    /**
     * ChatGPTレスポンス
     * @type {string}
     * @memberof GetAllTipsTipIdPromptsPromptId200Response
     */
    'message': string;
    /**
     * AIメッセージ使用回数
     * @type {number}
     * @memberof GetAllTipsTipIdPromptsPromptId200Response
     */
    'aiCount': number;
}
/**
 * 
 * @export
 * @interface GetAllZipcloudZipCode200Response
 */
export interface GetAllZipcloudZipCode200Response {
    /**
     * 都道府県コード
     * @type {string}
     * @memberof GetAllZipcloudZipCode200Response
     */
    'prefCode': string;
    /**
     * 市区町村
     * @type {string}
     * @memberof GetAllZipcloudZipCode200Response
     */
    'city': string;
}
/**
 * 
 * @export
 * @interface GetBusinessOperatorStaff200Response
 */
export interface GetBusinessOperatorStaff200Response {
    /**
     * 
     * @type {Array<StaffListItem>}
     * @memberof GetBusinessOperatorStaff200Response
     */
    'staffList': Array<StaffListItem>;
}
/**
 * 
 * @export
 * @interface GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response
 */
export interface GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response
     */
    'response'?: boolean;
}
/**
 * お知らせ
 * @export
 * @interface NotificationItem
 */
export interface NotificationItem {
    /**
     * 
     * @type {string}
     * @memberof NotificationItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationItem
     */
    'content': string;
    /**
     * 時間
     * @type {string}
     * @memberof NotificationItem
     */
    'startAt': string;
    /**
     * 
     * @type {NotificationTypeEnum}
     * @memberof NotificationItem
     */
    'type': NotificationTypeEnum;
}


/**
 * public => お知らせ / private => 個人向けお知らせ / pdf => PDF
 * @export
 * @enum {string}
 */

export const NotificationTypeEnum = {
    Public: 'public',
    Private: 'private',
    Pdf: 'pdf'
} as const;

export type NotificationTypeEnum = typeof NotificationTypeEnum[keyof typeof NotificationTypeEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const OrderEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type OrderEnum = typeof OrderEnum[keyof typeof OrderEnum];


/**
 * 
 * @export
 * @interface PointHistoryItem
 */
export interface PointHistoryItem {
    /**
     * 
     * @type {TransactionType}
     * @memberof PointHistoryItem
     */
    'transactionType': TransactionType;
    /**
     * ポイント変動
     * @type {number}
     * @memberof PointHistoryItem
     */
    'pointChange': number;
    /**
     * 時間
     * @type {string}
     * @memberof PointHistoryItem
     */
    'createdAt': string;
}


/**
 * 
 * @export
 * @interface PostBusinessOperatorQrBusinessOperatorRequest
 */
export interface PostBusinessOperatorQrBusinessOperatorRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PostBusinessOperatorQrBusinessOperatorRequest
     */
    'isMulti': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PostBusinessOperatorQrBusinessOperatorRequest
     */
    'isAbroad': boolean;
    /**
     * 
     * @type {number}
     * @memberof PostBusinessOperatorQrBusinessOperatorRequest
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PostBusinessOperatorQrBusinessOperatorRequest
     */
    'firstDeskNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostBusinessOperatorQrBusinessOperatorRequest
     */
    'secondDeskNumber'?: number;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorQrStaff200Response
 */
export interface PostBusinessOperatorQrStaff200Response {
    /**
     * 
     * @type {string}
     * @memberof PostBusinessOperatorQrStaff200Response
     */
    'filePath': string;
    /**
     * 
     * @type {string}
     * @memberof PostBusinessOperatorQrStaff200Response
     */
    'fileName': string;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorQrStaffRequest
 */
export interface PostBusinessOperatorQrStaffRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof PostBusinessOperatorQrStaffRequest
     */
    'staffIdList': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PostBusinessOperatorQrStaffRequest
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorStaffStaffIdSchedulesRequest
 */
export interface PostBusinessOperatorStaffStaffIdSchedulesRequest {
    /**
     * 
     * @type {Array<ScheduleItem>}
     * @memberof PostBusinessOperatorStaffStaffIdSchedulesRequest
     */
    'schedules': Array<ScheduleItem>;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest
 */
export interface PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest {
    /**
     * プッシュコード判定フラグ
     * @type {boolean}
     * @memberof PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest
     */
    'isMessageNotified': boolean;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorTransferPaymentAdvicePdf200Response
 */
export interface PostBusinessOperatorTransferPaymentAdvicePdf200Response {
    /**
     * 
     * @type {string}
     * @memberof PostBusinessOperatorTransferPaymentAdvicePdf200Response
     */
    'filePath': string;
    /**
     * 
     * @type {string}
     * @memberof PostBusinessOperatorTransferPaymentAdvicePdf200Response
     */
    'fileName': string;
}
/**
 * 
 * @export
 * @interface PostBusinessOperatorTransferPaymentAdvicePdfRequest
 */
export interface PostBusinessOperatorTransferPaymentAdvicePdfRequest {
    /**
     * 
     * @type {number}
     * @memberof PostBusinessOperatorTransferPaymentAdvicePdfRequest
     */
    'requestId': number;
}
/**
 * 
 * @export
 * @interface PostForgotPasswordInertia
 */
export interface PostForgotPasswordInertia {
    /**
     * トークン
     * @type {string}
     * @memberof PostForgotPasswordInertia
     */
    'token': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostForgotPasswordInertia
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof PostForgotPasswordInertia
     */
    'password': string;
    /**
     * パスワード
     * @type {string}
     * @memberof PostForgotPasswordInertia
     */
    'password_confirm': string;
}
/**
 * 
 * @export
 * @interface PostLoginInertia
 */
export interface PostLoginInertia {
    /**
     * メールアドレス
     * @type {string}
     * @memberof PostLoginInertia
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof PostLoginInertia
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostProfileSettingShowRankingRequest
 */
export interface PostProfileSettingShowRankingRequest {
    /**
     * ランキング表示判定フラグ
     * @type {boolean}
     * @memberof PostProfileSettingShowRankingRequest
     */
    'isShowRanking': boolean;
}
/**
 * 
 * @export
 * @interface PostStaffCheerReplyInertia
 */
export interface PostStaffCheerReplyInertia {
    /**
     * お礼メッセージ
     * @type {string}
     * @memberof PostStaffCheerReplyInertia
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostStaffProfileInertia
 */
export interface PostStaffProfileInertia {
    /**
     * スタッフ名
     * @type {string}
     * @memberof PostStaffProfileInertia
     */
    'staffName': string;
    /**
     * 一言コメント
     * @type {string}
     * @memberof PostStaffProfileInertia
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response
 */
export interface PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response {
    /**
     * stripe-jsで利用するsecretKey
     * @type {string}
     * @memberof PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response
     */
    'clientSecret': string;
}
/**
 * 
 * @export
 * @interface PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest
 */
export interface PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest {
    /**
     * stripe決済金額
     * @type {number}
     * @memberof PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest
     */
    'amount': number;
    /**
     * ゲストユーザーのニックネーム
     * @type {string}
     * @memberof PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest
     */
    'guestNickname': string;
    /**
     * 投げ銭するメッセージ
     * @type {string}
     * @memberof PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostUserPaymentInfoCreatePaymentIntentRequest
 */
export interface PostUserPaymentInfoCreatePaymentIntentRequest {
    /**
     * stripe決済金額
     * @type {number}
     * @memberof PostUserPaymentInfoCreatePaymentIntentRequest
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface PostUserPaymentInfoRegisterPaymentMethodRequest
 */
export interface PostUserPaymentInfoRegisterPaymentMethodRequest {
    /**
     * stripeトークン
     * @type {string}
     * @memberof PostUserPaymentInfoRegisterPaymentMethodRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface PostUserProfileImage200Response
 */
export interface PostUserProfileImage200Response {
    /**
     * ユーザー画像
     * @type {string}
     * @memberof PostUserProfileImage200Response
     */
    'userProfileImage': string;
}
/**
 * プロフィール画像
 * @export
 * @interface ProfileImageItem
 */
export interface ProfileImageItem {
    /**
     * 
     * @type {string}
     * @memberof ProfileImageItem
     */
    'image': string | null;
    /**
     * 
     * @type {OrderEnum}
     * @memberof ProfileImageItem
     */
    'order': OrderEnum;
}


/**
 * 
 * @export
 * @interface PutBusinessOperatorSettingUpdatePublish200Response
 */
export interface PutBusinessOperatorSettingUpdatePublish200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PutBusinessOperatorSettingUpdatePublish200Response
     */
    'response': boolean;
}
/**
 * 
 * @export
 * @interface PutBusinessOperatorSettingUpdatePublishRequest
 */
export interface PutBusinessOperatorSettingUpdatePublishRequest {
    /**
     * 
     * @type {number}
     * @memberof PutBusinessOperatorSettingUpdatePublishRequest
     */
    'settingId': number;
    /**
     * 
     * @type {boolean}
     * @memberof PutBusinessOperatorSettingUpdatePublishRequest
     */
    'isPublish': boolean;
}
/**
 * 
 * @export
 * @interface PutBusinessOperatorSettingUpdateReviewPublishRequest
 */
export interface PutBusinessOperatorSettingUpdateReviewPublishRequest {
    /**
     * 
     * @type {number}
     * @memberof PutBusinessOperatorSettingUpdateReviewPublishRequest
     */
    'settingId': number;
    /**
     * 
     * @type {boolean}
     * @memberof PutBusinessOperatorSettingUpdateReviewPublishRequest
     */
    'isReviewPublish': boolean;
}
/**
 * 
 * @export
 * @interface PutBusinessOperatorSettingUpdateStaffRankingPublishRequest
 */
export interface PutBusinessOperatorSettingUpdateStaffRankingPublishRequest {
    /**
     * 
     * @type {number}
     * @memberof PutBusinessOperatorSettingUpdateStaffRankingPublishRequest
     */
    'settingId': number;
    /**
     * 
     * @type {boolean}
     * @memberof PutBusinessOperatorSettingUpdateStaffRankingPublishRequest
     */
    'isStaffRankingPublish': boolean;
}
/**
 * 
 * @export
 * @interface ResponseLikes
 */
export interface ResponseLikes {
    /**
     * いいね数
     * @type {number}
     * @memberof ResponseLikes
     */
    'likeCount': number;
    /**
     * 投げ銭ユーザーいいね履歴
     * @type {Array<UserLikeItem>}
     * @memberof ResponseLikes
     */
    'likeList': Array<UserLikeItem>;
}
/**
 * 
 * @export
 * @interface ResponseNotification
 */
export interface ResponseNotification {
    /**
     * お知らせタイプ
     * @type {string}
     * @memberof ResponseNotification
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ResponsePointHistories
 */
export interface ResponsePointHistories {
    /**
     * 保有ポイント数
     * @type {number}
     * @memberof ResponsePointHistories
     */
    'points': number;
    /**
     * 
     * @type {Array<PointHistoryItem>}
     * @memberof ResponsePointHistories
     */
    'pointHistories': Array<PointHistoryItem>;
}
/**
 * 
 * @export
 * @interface ResponseStaffMyage
 */
export interface ResponseStaffMyage {
    /**
     * 事業者名
     * @type {string}
     * @memberof ResponseStaffMyage
     */
    'businessOperatorName': string;
    /**
     * スタッフ名
     * @type {string}
     * @memberof ResponseStaffMyage
     */
    'staffName': string;
    /**
     * 
     * @type {Array<NotificationItem>}
     * @memberof ResponseStaffMyage
     */
    'notifications'?: Array<NotificationItem>;
}
/**
 * 
 * @export
 * @interface ResponseStaffProfile
 */
export interface ResponseStaffProfile {
    /**
     * スタッフID
     * @type {number}
     * @memberof ResponseStaffProfile
     */
    'staffId': number;
    /**
     * プロフィール画像一覧
     * @type {Array<ProfileImageItem>}
     * @memberof ResponseStaffProfile
     */
    'images': Array<ProfileImageItem>;
    /**
     * スタッフ名
     * @type {string}
     * @memberof ResponseStaffProfile
     */
    'staffName': string;
    /**
     * 一言コメント
     * @type {string}
     * @memberof ResponseStaffProfile
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ResponseStaffProfileSetting
 */
export interface ResponseStaffProfileSetting {
    /**
     * スタッフID
     * @type {number}
     * @memberof ResponseStaffProfileSetting
     */
    'staffId': number;
    /**
     * プッシュ通知 ON / OFF
     * @type {boolean}
     * @memberof ResponseStaffProfileSetting
     */
    'isMessageNotified': boolean;
}
/**
 * 
 * @export
 * @interface ResponseStaffSchedules
 */
export interface ResponseStaffSchedules {
    /**
     * 時間
     * @type {string}
     * @memberof ResponseStaffSchedules
     */
    'startDate': string;
    /**
     * 時間
     * @type {string}
     * @memberof ResponseStaffSchedules
     */
    'endDate': string;
    /**
     * 
     * @type {Array<ScheduleItem>}
     * @memberof ResponseStaffSchedules
     */
    'schedules': Array<ScheduleItem>;
}
/**
 * 
 * @export
 * @interface ResponseTipShow
 */
export interface ResponseTipShow {
    /**
     * スタッフ名
     * @type {string}
     * @memberof ResponseTipShow
     */
    'staffName': string;
    /**
     * AIメッセージ使用回数
     * @type {number}
     * @memberof ResponseTipShow
     */
    'aiCount': number;
    /**
     * 
     * @type {UserTip}
     * @memberof ResponseTipShow
     */
    'userTip': UserTip;
    /**
     * 
     * @type {StaffTipReply}
     * @memberof ResponseTipShow
     */
    'staffTipReply'?: StaffTipReply;
}
/**
 * 応援履歴一覧
 * @export
 * @interface ResponseTips
 */
export interface ResponseTips {
    /**
     * 
     * @type {Array<UserTip>}
     * @memberof ResponseTips
     */
    'userTips': Array<UserTip>;
}
/**
 * admin => 法人 / businessOperator => 事業者 / staff => スタッフ / user => 投げ銭ユーザー
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    Admin: 'admin',
    BusinessOperator: 'businessOperator',
    Staff: 'staff',
    User: 'user'
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * 
 * @export
 * @interface ScheduleItem
 */
export interface ScheduleItem {
    /**
     * 時間
     * @type {string}
     * @memberof ScheduleItem
     */
    'date': string;
    /**
     * 曜日
     * @type {string}
     * @memberof ScheduleItem
     */
    'dayOfWeek': string;
    /**
     * 
     * @type {ScheduleStatusEnum}
     * @memberof ScheduleItem
     */
    'status': ScheduleStatusEnum;
}


/**
 * 1 => notYet / 2 => holiday / 3 => work
 * @export
 * @enum {string}
 */

export const ScheduleStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ScheduleStatusEnum = typeof ScheduleStatusEnum[keyof typeof ScheduleStatusEnum];


/**
 * 
 * @export
 * @interface SsrPostStaffTipsTipIdRequest
 */
export interface SsrPostStaffTipsTipIdRequest {
    /**
     * お礼メッセージ
     * @type {string}
     * @memberof SsrPostStaffTipsTipIdRequest
     */
    'message': string;
    /**
     * ファイル(画像or動画)
     * @type {File}
     * @memberof SsrPostStaffTipsTipIdRequest
     */
    'file': File | null;
}
/**
 * 
 * @export
 * @interface SsrStaffProfileUpdateRequest
 */
export interface SsrStaffProfileUpdateRequest {
    /**
     * スタッフ名
     * @type {string}
     * @memberof SsrStaffProfileUpdateRequest
     */
    'staffName': string;
    /**
     * 一言コメント
     * @type {string}
     * @memberof SsrStaffProfileUpdateRequest
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface StaffListItem
 */
export interface StaffListItem {
    /**
     * スタッフID
     * @type {number}
     * @memberof StaffListItem
     */
    'staffId': number;
    /**
     * スタッフ名
     * @type {string}
     * @memberof StaffListItem
     */
    'staffName': string;
    /**
     * 管理者スタッフ / 一般スタッフ
     * @type {string}
     * @memberof StaffListItem
     */
    'role': string;
    /**
     * 画像URL or 動画URL
     * @type {string}
     * @memberof StaffListItem
     */
    'image'?: string | null;
}
/**
 * 
 * @export
 * @interface StaffTipReply
 */
export interface StaffTipReply {
    /**
     * 投げ銭返信ID
     * @type {number}
     * @memberof StaffTipReply
     */
    'replyId': number;
    /**
     * 画像URL or 動画URL
     * @type {string}
     * @memberof StaffTipReply
     */
    'image'?: string | null;
    /**
     * スタッフ名
     * @type {string}
     * @memberof StaffTipReply
     */
    'staffName': string;
    /**
     * 時間
     * @type {string}
     * @memberof StaffTipReply
     */
    'createdAt': string;
    /**
     * お礼メッセージ
     * @type {string}
     * @memberof StaffTipReply
     */
    'message': string;
    /**
     * 画像URL or 動画URL
     * @type {string}
     * @memberof StaffTipReply
     */
    'messageSrc': string | null;
    /**
     * image => 画像 / video => 動画
     * @type {string}
     * @memberof StaffTipReply
     */
    'messageSrcType'?: StaffTipReplyMessageSrcTypeEnum;
}

export const StaffTipReplyMessageSrcTypeEnum = {
    Image: 'image',
    Video: 'video'
} as const;

export type StaffTipReplyMessageSrcTypeEnum = typeof StaffTipReplyMessageSrcTypeEnum[keyof typeof StaffTipReplyMessageSrcTypeEnum];

/**
 * 
 * @export
 * @interface ToggleFavorite200Response
 */
export interface ToggleFavorite200Response {
    /**
     * 
     * @type {number}
     * @memberof ToggleFavorite200Response
     */
    'favoriteId': number | null;
}
/**
 * 
 * @export
 * @interface ToggleUserLike200Response
 */
export interface ToggleUserLike200Response {
    /**
     * 
     * @type {number}
     * @memberof ToggleUserLike200Response
     */
    'userLikeId': number | null;
}
/**
 * 1 => exchange / 2 => get
 * @export
 * @enum {string}
 */

export const TransactionType = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type TransactionType = typeof TransactionType[keyof typeof TransactionType];


/**
 * 投げ銭ユーザーいいね
 * @export
 * @interface UserLikeItem
 */
export interface UserLikeItem {
    /**
     * 投げ銭ユーザー名
     * @type {string}
     * @memberof UserLikeItem
     */
    'userName': string;
    /**
     * 画像URL or 動画URL
     * @type {string}
     * @memberof UserLikeItem
     */
    'image'?: string | null;
}
/**
 * 
 * @export
 * @interface UserTip
 */
export interface UserTip {
    /**
     * 投げ銭ID
     * @type {number}
     * @memberof UserTip
     */
    'tipId': number;
    /**
     * 投げ銭ユーザーID
     * @type {number}
     * @memberof UserTip
     */
    'userId': number;
    /**
     * スタッフID
     * @type {number}
     * @memberof UserTip
     */
    'staffId': number;
    /**
     * 画像URL or 動画URL
     * @type {string}
     * @memberof UserTip
     */
    'image'?: string | null;
    /**
     * 投げ銭ユーザー名
     * @type {string}
     * @memberof UserTip
     */
    'userName': string;
    /**
     * 保有ポイント数
     * @type {number}
     * @memberof UserTip
     */
    'points': number;
    /**
     * お礼メッセージ
     * @type {string}
     * @memberof UserTip
     */
    'message': string;
    /**
     * 時間
     * @type {string}
     * @memberof UserTip
     */
    'createdAt': string;
    /**
     * 既読
     * @type {boolean}
     * @memberof UserTip
     */
    'isRead': boolean;
    /**
     * 返信
     * @type {boolean}
     * @memberof UserTip
     */
    'isResponse': boolean;
}

/**
 * ALLApi - axios parameter creator
 * @export
 */
export const ALLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ChatGPT API
         * @param {number} staffId スタッフID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStaffStaffIdPromptsPromptId: async (staffId: number, promptId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('getAllStaffStaffIdPromptsPromptId', 'staffId', staffId)
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('getAllStaffStaffIdPromptsPromptId', 'promptId', promptId)
            const localVarPath = `/all/staff/{staffId}/prompts/{promptId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)))
                .replace(`{${"promptId"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ChatGPT API
         * @param {number} tipId 投げ銭ID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTipsTipIdPromptsPromptId: async (tipId: number, promptId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('getAllTipsTipIdPromptsPromptId', 'tipId', tipId)
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('getAllTipsTipIdPromptsPromptId', 'promptId', promptId)
            const localVarPath = `/all/tips/{tipId}/prompts/{promptId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)))
                .replace(`{${"promptId"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Zipcloudで住所情報取得
         * @param {string} zipCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllZipcloudZipCode: async (zipCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zipCode' is not null or undefined
            assertParamExists('getAllZipcloudZipCode', 'zipCode', zipCode)
            const localVarPath = `/all/zipcloud/{zipCode}`
                .replace(`{${"zipCode"}}`, encodeURIComponent(String(zipCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ALLApi - functional programming interface
 * @export
 */
export const ALLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ALLApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ChatGPT API
         * @param {number} staffId スタッフID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStaffStaffIdPromptsPromptId(staffId: number, promptId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllStaffStaffIdPromptsPromptId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStaffStaffIdPromptsPromptId(staffId, promptId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ALLApi.getAllStaffStaffIdPromptsPromptId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ChatGPT API
         * @param {number} tipId 投げ銭ID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTipsTipIdPromptsPromptId(tipId: number, promptId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllTipsTipIdPromptsPromptId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTipsTipIdPromptsPromptId(tipId, promptId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ALLApi.getAllTipsTipIdPromptsPromptId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Zipcloudで住所情報取得
         * @param {string} zipCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllZipcloudZipCode(zipCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllZipcloudZipCode200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllZipcloudZipCode(zipCode, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ALLApi.getAllZipcloudZipCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ALLApi - factory interface
 * @export
 */
export const ALLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ALLApiFp(configuration)
    return {
        /**
         * 
         * @summary ChatGPT API
         * @param {number} staffId スタッフID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStaffStaffIdPromptsPromptId(staffId: number, promptId: number, options?: any): AxiosPromise<GetAllStaffStaffIdPromptsPromptId200Response> {
            return localVarFp.getAllStaffStaffIdPromptsPromptId(staffId, promptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ChatGPT API
         * @param {number} tipId 投げ銭ID
         * @param {number} promptId CHATGPT prompt ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTipsTipIdPromptsPromptId(tipId: number, promptId: number, options?: any): AxiosPromise<GetAllTipsTipIdPromptsPromptId200Response> {
            return localVarFp.getAllTipsTipIdPromptsPromptId(tipId, promptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Zipcloudで住所情報取得
         * @param {string} zipCode 郵便番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllZipcloudZipCode(zipCode: string, options?: any): AxiosPromise<GetAllZipcloudZipCode200Response> {
            return localVarFp.getAllZipcloudZipCode(zipCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ALLApi - interface
 * @export
 * @interface ALLApi
 */
export interface ALLApiInterface {
    /**
     * 
     * @summary ChatGPT API
     * @param {number} staffId スタッフID
     * @param {number} promptId CHATGPT prompt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApiInterface
     */
    getAllStaffStaffIdPromptsPromptId(staffId: number, promptId: number, options?: AxiosRequestConfig): AxiosPromise<GetAllStaffStaffIdPromptsPromptId200Response>;

    /**
     * 
     * @summary ChatGPT API
     * @param {number} tipId 投げ銭ID
     * @param {number} promptId CHATGPT prompt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApiInterface
     */
    getAllTipsTipIdPromptsPromptId(tipId: number, promptId: number, options?: AxiosRequestConfig): AxiosPromise<GetAllTipsTipIdPromptsPromptId200Response>;

    /**
     * 
     * @summary Zipcloudで住所情報取得
     * @param {string} zipCode 郵便番号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApiInterface
     */
    getAllZipcloudZipCode(zipCode: string, options?: AxiosRequestConfig): AxiosPromise<GetAllZipcloudZipCode200Response>;

}

/**
 * ALLApi - object-oriented interface
 * @export
 * @class ALLApi
 * @extends {BaseAPI}
 */
export class ALLApi extends BaseAPI implements ALLApiInterface {
    /**
     * 
     * @summary ChatGPT API
     * @param {number} staffId スタッフID
     * @param {number} promptId CHATGPT prompt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApi
     */
    public getAllStaffStaffIdPromptsPromptId(staffId: number, promptId: number, options?: AxiosRequestConfig) {
        return ALLApiFp(this.configuration).getAllStaffStaffIdPromptsPromptId(staffId, promptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ChatGPT API
     * @param {number} tipId 投げ銭ID
     * @param {number} promptId CHATGPT prompt ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApi
     */
    public getAllTipsTipIdPromptsPromptId(tipId: number, promptId: number, options?: AxiosRequestConfig) {
        return ALLApiFp(this.configuration).getAllTipsTipIdPromptsPromptId(tipId, promptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Zipcloudで住所情報取得
     * @param {string} zipCode 郵便番号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ALLApi
     */
    public getAllZipcloudZipCode(zipCode: string, options?: AxiosRequestConfig) {
        return ALLApiFp(this.configuration).getAllZipcloudZipCode(zipCode, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BUSINESSOPERATORApi - axios parameter creator
 * @export
 */
export const BUSINESSOPERATORApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ファイル削除
         * @param {DeleteBusinessOperatorFileRequest} [deleteBusinessOperatorFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorFile: async (deleteBusinessOperatorFileRequest?: DeleteBusinessOperatorFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBusinessOperatorFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorProfileImage: async (deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/profile/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBusinessOperatorStaffStaffIdProfileImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理者スタッフ論理削除処理
         * @param {number} adminStaffId 管理者スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffAdminAdminStaffId: async (adminStaffId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminStaffId' is not null or undefined
            assertParamExists('deleteBusinessOperatorStaffAdminAdminStaffId', 'adminStaffId', adminStaffId)
            const localVarPath = `/business-operator/staff/admin/{adminStaffId}`
                .replace(`{${"adminStaffId"}}`, encodeURIComponent(String(adminStaffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフ論理削除処理
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffStaffId: async (staffId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('deleteBusinessOperatorStaffStaffId', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {number} staffId スタッフID
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffStaffIdProfileImage: async (staffId: number, deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('deleteBusinessOperatorStaffStaffIdProfileImage', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}/profile/image`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBusinessOperatorStaffStaffIdProfileImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessOperatorStaff: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessOperatorStaffStaffIdSchedules: async (staffId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('getBusinessOperatorStaffStaffIdSchedules', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}/schedules`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorProfileImage: async (image: File | null, order: OrderEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('postBusinessOperatorProfileImage', 'image', image)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('postBusinessOperatorProfileImage', 'order', order)
            const localVarPath = `/business-operator/profile/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ショップ用QRコード生成
         * @param {PostBusinessOperatorQrBusinessOperatorRequest} [postBusinessOperatorQrBusinessOperatorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorQrBusinessOperator: async (postBusinessOperatorQrBusinessOperatorRequest?: PostBusinessOperatorQrBusinessOperatorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/qr/business-operator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorQrBusinessOperatorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフ用QRコード生成
         * @param {PostBusinessOperatorQrStaffRequest} [postBusinessOperatorQrStaffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorQrStaff: async (postBusinessOperatorQrStaffRequest?: PostBusinessOperatorQrStaffRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/qr/staff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorQrStaffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {number} staffId スタッフID
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdProfileImage: async (staffId: number, image: File | null, order: OrderEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('postBusinessOperatorStaffStaffIdProfileImage', 'staffId', staffId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('postBusinessOperatorStaffStaffIdProfileImage', 'image', image)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('postBusinessOperatorStaffStaffIdProfileImage', 'order', order)
            const localVarPath = `/business-operator/staff/{staffId}/profile/image`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSchedulesRequest} [postBusinessOperatorStaffStaffIdSchedulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdSchedules: async (staffId: number, postBusinessOperatorStaffStaffIdSchedulesRequest?: PostBusinessOperatorStaffStaffIdSchedulesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('postBusinessOperatorStaffStaffIdSchedules', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}/schedules`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorStaffStaffIdSchedulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 各種設定
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdSettingMessageNotified: async (staffId: number, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('postBusinessOperatorStaffStaffIdSettingMessageNotified', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}/setting/message-notified`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorTransferPaymentAdvicePdf: async (postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/transfer/payment-advice/pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorTransferPaymentAdvicePdfRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdatePublish: async (putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/setting/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBusinessOperatorSettingUpdatePublishRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 口コミ公開設定更新
         * @param {PutBusinessOperatorSettingUpdateReviewPublishRequest} [putBusinessOperatorSettingUpdateReviewPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdateReviewPublish: async (putBusinessOperatorSettingUpdateReviewPublishRequest?: PutBusinessOperatorSettingUpdateReviewPublishRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/setting/review-publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBusinessOperatorSettingUpdateReviewPublishRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタッフランキング公開設定更新
         * @param {PutBusinessOperatorSettingUpdateStaffRankingPublishRequest} [putBusinessOperatorSettingUpdateStaffRankingPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdateStaffRankingPublish: async (putBusinessOperatorSettingUpdateStaffRankingPublishRequest?: PutBusinessOperatorSettingUpdateStaffRankingPublishRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-operator/setting/staff-ranking-publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBusinessOperatorSettingUpdateStaffRankingPublishRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BUSINESSOPERATORApi - functional programming interface
 * @export
 */
export const BUSINESSOPERATORApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BUSINESSOPERATORApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ファイル削除
         * @param {DeleteBusinessOperatorFileRequest} [deleteBusinessOperatorFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest?: DeleteBusinessOperatorFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.deleteBusinessOperatorFile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.deleteBusinessOperatorProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 管理者スタッフ論理削除処理
         * @param {number} adminStaffId 管理者スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.deleteBusinessOperatorStaffAdminAdminStaffId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフ論理削除処理
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessOperatorStaffStaffId(staffId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessOperatorStaffStaffId(staffId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.deleteBusinessOperatorStaffStaffId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {number} staffId スタッフID
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessOperatorStaffStaffIdProfileImage(staffId: number, deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessOperatorStaffStaffIdProfileImage(staffId, deleteBusinessOperatorStaffStaffIdProfileImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.deleteBusinessOperatorStaffStaffIdProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessOperatorStaff(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessOperatorStaff200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessOperatorStaff(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.getBusinessOperatorStaff']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessOperatorStaffStaffIdSchedules(staffId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffSchedules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessOperatorStaffStaffIdSchedules(staffId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.getBusinessOperatorStaffStaffIdSchedules']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorProfileImage(image, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ショップ用QRコード生成
         * @param {PostBusinessOperatorQrBusinessOperatorRequest} [postBusinessOperatorQrBusinessOperatorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest?: PostBusinessOperatorQrBusinessOperatorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessOperatorQrStaff200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorQrBusinessOperator']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフ用QRコード生成
         * @param {PostBusinessOperatorQrStaffRequest} [postBusinessOperatorQrStaffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest?: PostBusinessOperatorQrStaffRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessOperatorQrStaff200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorQrStaff']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {number} staffId スタッフID
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorStaffStaffIdProfileImage(staffId: number, image: File | null, order: OrderEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorStaffStaffIdProfileImage(staffId, image, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorStaffStaffIdProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSchedulesRequest} [postBusinessOperatorStaffStaffIdSchedulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorStaffStaffIdSchedules(staffId: number, postBusinessOperatorStaffStaffIdSchedulesRequest?: PostBusinessOperatorStaffStaffIdSchedulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffSchedules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorStaffStaffIdSchedules(staffId, postBusinessOperatorStaffStaffIdSchedulesRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorStaffStaffIdSchedules']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 各種設定
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId: number, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorStaffStaffIdSettingMessageNotified']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.postBusinessOperatorTransferPaymentAdvicePdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.putBusinessOperatorSettingUpdatePublish']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 口コミ公開設定更新
         * @param {PutBusinessOperatorSettingUpdateReviewPublishRequest} [putBusinessOperatorSettingUpdateReviewPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest?: PutBusinessOperatorSettingUpdateReviewPublishRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.putBusinessOperatorSettingUpdateReviewPublish']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary スタッフランキング公開設定更新
         * @param {PutBusinessOperatorSettingUpdateStaffRankingPublishRequest} [putBusinessOperatorSettingUpdateStaffRankingPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest?: PutBusinessOperatorSettingUpdateStaffRankingPublishRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BUSINESSOPERATORApi.putBusinessOperatorSettingUpdateStaffRankingPublish']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * BUSINESSOPERATORApi - factory interface
 * @export
 */
export const BUSINESSOPERATORApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BUSINESSOPERATORApiFp(configuration)
    return {
        /**
         * 
         * @summary ファイル削除
         * @param {DeleteBusinessOperatorFileRequest} [deleteBusinessOperatorFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest?: DeleteBusinessOperatorFileRequest, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理者スタッフ論理削除処理
         * @param {number} adminStaffId 管理者スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId: number, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフ論理削除処理
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffStaffId(staffId: number, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.deleteBusinessOperatorStaffStaffId(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像削除
         * @param {number} staffId スタッフID
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessOperatorStaffStaffIdProfileImage(staffId: number, deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.deleteBusinessOperatorStaffStaffIdProfileImage(staffId, deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessOperatorStaff(options?: any): AxiosPromise<GetBusinessOperatorStaff200Response> {
            return localVarFp.getBusinessOperatorStaff(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessOperatorStaffStaffIdSchedules(staffId: number, options?: any): AxiosPromise<ResponseStaffSchedules> {
            return localVarFp.getBusinessOperatorStaffStaffIdSchedules(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorProfileImage(image: File | null, order: OrderEnum, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.postBusinessOperatorProfileImage(image, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ショップ用QRコード生成
         * @param {PostBusinessOperatorQrBusinessOperatorRequest} [postBusinessOperatorQrBusinessOperatorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest?: PostBusinessOperatorQrBusinessOperatorRequest, options?: any): AxiosPromise<PostBusinessOperatorQrStaff200Response> {
            return localVarFp.postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフ用QRコード生成
         * @param {PostBusinessOperatorQrStaffRequest} [postBusinessOperatorQrStaffRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest?: PostBusinessOperatorQrStaffRequest, options?: any): AxiosPromise<PostBusinessOperatorQrStaff200Response> {
            return localVarFp.postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {number} staffId スタッフID
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdProfileImage(staffId: number, image: File | null, order: OrderEnum, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.postBusinessOperatorStaffStaffIdProfileImage(staffId, image, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフスケジュール取得
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSchedulesRequest} [postBusinessOperatorStaffStaffIdSchedulesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdSchedules(staffId: number, postBusinessOperatorStaffStaffIdSchedulesRequest?: PostBusinessOperatorStaffStaffIdSchedulesRequest, options?: any): AxiosPromise<ResponseStaffSchedules> {
            return localVarFp.postBusinessOperatorStaffStaffIdSchedules(staffId, postBusinessOperatorStaffStaffIdSchedulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 各種設定
         * @param {number} staffId スタッフID
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId: number, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: any): AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response> {
            return localVarFp.postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: any): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response> {
            return localVarFp.putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 口コミ公開設定更新
         * @param {PutBusinessOperatorSettingUpdateReviewPublishRequest} [putBusinessOperatorSettingUpdateReviewPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest?: PutBusinessOperatorSettingUpdateReviewPublishRequest, options?: any): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response> {
            return localVarFp.putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタッフランキング公開設定更新
         * @param {PutBusinessOperatorSettingUpdateStaffRankingPublishRequest} [putBusinessOperatorSettingUpdateStaffRankingPublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest?: PutBusinessOperatorSettingUpdateStaffRankingPublishRequest, options?: any): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response> {
            return localVarFp.putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BUSINESSOPERATORApi - interface
 * @export
 * @interface BUSINESSOPERATORApi
 */
export interface BUSINESSOPERATORApiInterface {
    /**
     * 
     * @summary ファイル削除
     * @param {DeleteBusinessOperatorFileRequest} [deleteBusinessOperatorFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest?: DeleteBusinessOperatorFileRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary プロフィール画像削除
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary 管理者スタッフ論理削除処理
     * @param {number} adminStaffId 管理者スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId: number, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary スタッフ論理削除処理
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    deleteBusinessOperatorStaffStaffId(staffId: number, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary プロフィール画像削除
     * @param {number} staffId スタッフID
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    deleteBusinessOperatorStaffStaffIdProfileImage(staffId: number, deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary スタッフ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    getBusinessOperatorStaff(options?: AxiosRequestConfig): AxiosPromise<GetBusinessOperatorStaff200Response>;

    /**
     * 
     * @summary スタッフスケジュール取得
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    getBusinessOperatorStaffStaffIdSchedules(staffId: number, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffSchedules>;

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary ショップ用QRコード生成
     * @param {PostBusinessOperatorQrBusinessOperatorRequest} [postBusinessOperatorQrBusinessOperatorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest?: PostBusinessOperatorQrBusinessOperatorRequest, options?: AxiosRequestConfig): AxiosPromise<PostBusinessOperatorQrStaff200Response>;

    /**
     * 
     * @summary スタッフ用QRコード生成
     * @param {PostBusinessOperatorQrStaffRequest} [postBusinessOperatorQrStaffRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest?: PostBusinessOperatorQrStaffRequest, options?: AxiosRequestConfig): AxiosPromise<PostBusinessOperatorQrStaff200Response>;

    /**
     * 
     * @summary プロフィール画像登録
     * @param {number} staffId スタッフID
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorStaffStaffIdProfileImage(staffId: number, image: File | null, order: OrderEnum, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary スタッフスケジュール取得
     * @param {number} staffId スタッフID
     * @param {PostBusinessOperatorStaffStaffIdSchedulesRequest} [postBusinessOperatorStaffStaffIdSchedulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorStaffStaffIdSchedules(staffId: number, postBusinessOperatorStaffStaffIdSchedulesRequest?: PostBusinessOperatorStaffStaffIdSchedulesRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffSchedules>;

    /**
     * 
     * @summary 各種設定
     * @param {number} staffId スタッフID
     * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId: number, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary 支払通知書PDF生成
     * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig): AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response>;

    /**
     * 
     * @summary 公開設定更新
     * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>;

    /**
     * 
     * @summary 口コミ公開設定更新
     * @param {PutBusinessOperatorSettingUpdateReviewPublishRequest} [putBusinessOperatorSettingUpdateReviewPublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest?: PutBusinessOperatorSettingUpdateReviewPublishRequest, options?: AxiosRequestConfig): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>;

    /**
     * 
     * @summary スタッフランキング公開設定更新
     * @param {PutBusinessOperatorSettingUpdateStaffRankingPublishRequest} [putBusinessOperatorSettingUpdateStaffRankingPublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApiInterface
     */
    putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest?: PutBusinessOperatorSettingUpdateStaffRankingPublishRequest, options?: AxiosRequestConfig): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>;

}

/**
 * BUSINESSOPERATORApi - object-oriented interface
 * @export
 * @class BUSINESSOPERATORApi
 * @extends {BaseAPI}
 */
export class BUSINESSOPERATORApi extends BaseAPI implements BUSINESSOPERATORApiInterface {
    /**
     * 
     * @summary ファイル削除
     * @param {DeleteBusinessOperatorFileRequest} [deleteBusinessOperatorFileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest?: DeleteBusinessOperatorFileRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).deleteBusinessOperatorFile(deleteBusinessOperatorFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像削除
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).deleteBusinessOperatorProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理者スタッフ論理削除処理
     * @param {number} adminStaffId 管理者スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId: number, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).deleteBusinessOperatorStaffAdminAdminStaffId(adminStaffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフ論理削除処理
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public deleteBusinessOperatorStaffStaffId(staffId: number, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).deleteBusinessOperatorStaffStaffId(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像削除
     * @param {number} staffId スタッフID
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public deleteBusinessOperatorStaffStaffIdProfileImage(staffId: number, deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).deleteBusinessOperatorStaffStaffIdProfileImage(staffId, deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public getBusinessOperatorStaff(options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).getBusinessOperatorStaff(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフスケジュール取得
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public getBusinessOperatorStaffStaffIdSchedules(staffId: number, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).getBusinessOperatorStaffStaffIdSchedules(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorProfileImage(image, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ショップ用QRコード生成
     * @param {PostBusinessOperatorQrBusinessOperatorRequest} [postBusinessOperatorQrBusinessOperatorRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest?: PostBusinessOperatorQrBusinessOperatorRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorQrBusinessOperator(postBusinessOperatorQrBusinessOperatorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフ用QRコード生成
     * @param {PostBusinessOperatorQrStaffRequest} [postBusinessOperatorQrStaffRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest?: PostBusinessOperatorQrStaffRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorQrStaff(postBusinessOperatorQrStaffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像登録
     * @param {number} staffId スタッフID
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorStaffStaffIdProfileImage(staffId: number, image: File | null, order: OrderEnum, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorStaffStaffIdProfileImage(staffId, image, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフスケジュール取得
     * @param {number} staffId スタッフID
     * @param {PostBusinessOperatorStaffStaffIdSchedulesRequest} [postBusinessOperatorStaffStaffIdSchedulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorStaffStaffIdSchedules(staffId: number, postBusinessOperatorStaffStaffIdSchedulesRequest?: PostBusinessOperatorStaffStaffIdSchedulesRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorStaffStaffIdSchedules(staffId, postBusinessOperatorStaffStaffIdSchedulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 各種設定
     * @param {number} staffId スタッフID
     * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId: number, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorStaffStaffIdSettingMessageNotified(staffId, postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 支払通知書PDF生成
     * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).postBusinessOperatorTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 公開設定更新
     * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).putBusinessOperatorSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 口コミ公開設定更新
     * @param {PutBusinessOperatorSettingUpdateReviewPublishRequest} [putBusinessOperatorSettingUpdateReviewPublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest?: PutBusinessOperatorSettingUpdateReviewPublishRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).putBusinessOperatorSettingUpdateReviewPublish(putBusinessOperatorSettingUpdateReviewPublishRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタッフランキング公開設定更新
     * @param {PutBusinessOperatorSettingUpdateStaffRankingPublishRequest} [putBusinessOperatorSettingUpdateStaffRankingPublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BUSINESSOPERATORApi
     */
    public putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest?: PutBusinessOperatorSettingUpdateStaffRankingPublishRequest, options?: AxiosRequestConfig) {
        return BUSINESSOPERATORApiFp(this.configuration).putBusinessOperatorSettingUpdateStaffRankingPublish(putBusinessOperatorSettingUpdateStaffRankingPublishRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CORPORATIONApi - axios parameter creator
 * @export
 */
export const CORPORATIONApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCorporationTransferPaymentAdvicePdf: async (postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/corporation/transfer/payment-advice/pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorTransferPaymentAdvicePdfRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCorporationSettingUpdatePublish: async (putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/corporation/setting/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putBusinessOperatorSettingUpdatePublishRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CORPORATIONApi - functional programming interface
 * @export
 */
export const CORPORATIONApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CORPORATIONApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CORPORATIONApi.postCorporationTransferPaymentAdvicePdf']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CORPORATIONApi.putCorporationSettingUpdatePublish']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CORPORATIONApi - factory interface
 * @export
 */
export const CORPORATIONApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CORPORATIONApiFp(configuration)
    return {
        /**
         * 
         * @summary 支払通知書PDF生成
         * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: any): AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response> {
            return localVarFp.postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 公開設定更新
         * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: any): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response> {
            return localVarFp.putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CORPORATIONApi - interface
 * @export
 * @interface CORPORATIONApi
 */
export interface CORPORATIONApiInterface {
    /**
     * 
     * @summary 支払通知書PDF生成
     * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORPORATIONApiInterface
     */
    postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig): AxiosPromise<PostBusinessOperatorTransferPaymentAdvicePdf200Response>;

    /**
     * 
     * @summary 公開設定更新
     * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORPORATIONApiInterface
     */
    putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig): AxiosPromise<PutBusinessOperatorSettingUpdatePublish200Response>;

}

/**
 * CORPORATIONApi - object-oriented interface
 * @export
 * @class CORPORATIONApi
 * @extends {BaseAPI}
 */
export class CORPORATIONApi extends BaseAPI implements CORPORATIONApiInterface {
    /**
     * 
     * @summary 支払通知書PDF生成
     * @param {PostBusinessOperatorTransferPaymentAdvicePdfRequest} [postBusinessOperatorTransferPaymentAdvicePdfRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORPORATIONApi
     */
    public postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest?: PostBusinessOperatorTransferPaymentAdvicePdfRequest, options?: AxiosRequestConfig) {
        return CORPORATIONApiFp(this.configuration).postCorporationTransferPaymentAdvicePdf(postBusinessOperatorTransferPaymentAdvicePdfRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 公開設定更新
     * @param {PutBusinessOperatorSettingUpdatePublishRequest} [putBusinessOperatorSettingUpdatePublishRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORPORATIONApi
     */
    public putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest?: PutBusinessOperatorSettingUpdatePublishRequest, options?: AxiosRequestConfig) {
        return CORPORATIONApiFp(this.configuration).putCorporationSettingUpdatePublish(putBusinessOperatorSettingUpdatePublishRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GUESTApi - axios parameter creator
 * @export
 */
export const GUESTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 口コミ削除処理
         * @param {number} businessId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewId: async (businessId: number, reviewId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('deleteReviewId', 'businessId', businessId)
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('deleteReviewId', 'reviewId', reviewId)
            const localVarPath = `/user/business-operator/{businessId}/review/{reviewId}`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 事業者・スタッフチェック
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists: async (businessId: number, staffId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists', 'businessId', businessId)
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists', 'staffId', staffId)
            const localVarPath = `/guest/business-operator/{businessId}/staff/{staffId}/exists`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ランキング表示・非表示更新API
         * @param {PostProfileSettingShowRankingRequest} [postProfileSettingShowRankingRequest] ランキング表示設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileSettingShowRanking: async (postProfileSettingShowRankingRequest?: PostProfileSettingShowRankingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/profile/setting/show-ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProfileSettingShowRankingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest} [postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent: async (businessId: number, staffId: number, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest?: PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent', 'businessId', businessId)
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent', 'staffId', staffId)
            const localVarPath = `/guest/business-operator/{businessId}/staff/{staffId}/create-payment-intent`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {PostUserPaymentInfoCreatePaymentIntentRequest} [postUserPaymentInfoCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserPaymentInfoCreatePaymentIntent: async (postUserPaymentInfoCreatePaymentIntentRequest?: PostUserPaymentInfoCreatePaymentIntentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/payment-info/create-payment-intent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserPaymentInfoCreatePaymentIntentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary stripe会員情報登録
         * @param {PostUserPaymentInfoRegisterPaymentMethodRequest} [postUserPaymentInfoRegisterPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserPaymentInfoRegisterPaymentMethod: async (postUserPaymentInfoRegisterPaymentMethodRequest?: PostUserPaymentInfoRegisterPaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/payment-info/register-payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserPaymentInfoRegisterPaymentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserProfileImage: async (image: File | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('postUserProfileImage', 'image', image)
            const localVarPath = `/user/profile/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary お気に入りスタッフ切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleFavorite: async (staffId: number, favoriteId?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('toggleFavorite', 'staffId', staffId)
            const localVarPath = `/user/staff/{staffId}/staff-favorite`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (favoriteId !== undefined) {
                localVarQueryParameter['favoriteId'] = favoriteId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary いいね切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [userLikeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleUserLike: async (staffId: number, userLikeId?: number | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('toggleUserLike', 'staffId', staffId)
            const localVarPath = `/user/staff/{staffId}/user-like`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userLikeId !== undefined) {
                localVarQueryParameter['userLikeId'] = userLikeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GUESTApi - functional programming interface
 * @export
 */
export const GUESTApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GUESTApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 口コミ削除処理
         * @param {number} businessId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReviewId(businessId: number, reviewId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReviewId(businessId, reviewId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.deleteReviewId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 事業者・スタッフチェック
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId: number, staffId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId, staffId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ランキング表示・非表示更新API
         * @param {PostProfileSettingShowRankingRequest} [postProfileSettingShowRankingRequest] ランキング表示設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProfileSettingShowRanking(postProfileSettingShowRankingRequest?: PostProfileSettingShowRankingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProfileSettingShowRanking(postProfileSettingShowRankingRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.postProfileSettingShowRanking']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest} [postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId: number, staffId: number, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest?: PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId, staffId, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {PostUserPaymentInfoCreatePaymentIntentRequest} [postUserPaymentInfoCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest?: PostUserPaymentInfoCreatePaymentIntentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.postUserPaymentInfoCreatePaymentIntent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary stripe会員情報登録
         * @param {PostUserPaymentInfoRegisterPaymentMethodRequest} [postUserPaymentInfoRegisterPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest?: PostUserPaymentInfoRegisterPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.postUserPaymentInfoRegisterPaymentMethod']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserProfileImage(image: File | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserProfileImage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserProfileImage(image, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.postUserProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary お気に入りスタッフ切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleFavorite(staffId: number, favoriteId?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToggleFavorite200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleFavorite(staffId, favoriteId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.toggleFavorite']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary いいね切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [userLikeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleUserLike(staffId: number, userLikeId?: number | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToggleUserLike200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleUserLike(staffId, userLikeId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GUESTApi.toggleUserLike']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GUESTApi - factory interface
 * @export
 */
export const GUESTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GUESTApiFp(configuration)
    return {
        /**
         * 
         * @summary 口コミ削除処理
         * @param {number} businessId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewId(businessId: number, reviewId: number, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.deleteReviewId(businessId, reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 事業者・スタッフチェック
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId: number, staffId: number, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId, staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ランキング表示・非表示更新API
         * @param {PostProfileSettingShowRankingRequest} [postProfileSettingShowRankingRequest] ランキング表示設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileSettingShowRanking(postProfileSettingShowRankingRequest?: PostProfileSettingShowRankingRequest, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.postProfileSettingShowRanking(postProfileSettingShowRankingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {number} businessId 
         * @param {number} staffId スタッフID
         * @param {PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest} [postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId: number, staffId: number, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest?: PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options?: any): AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response> {
            return localVarFp.postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId, staffId, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary StripeElementSecretKey取得
         * @param {PostUserPaymentInfoCreatePaymentIntentRequest} [postUserPaymentInfoCreatePaymentIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest?: PostUserPaymentInfoCreatePaymentIntentRequest, options?: any): AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response> {
            return localVarFp.postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary stripe会員情報登録
         * @param {PostUserPaymentInfoRegisterPaymentMethodRequest} [postUserPaymentInfoRegisterPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest?: PostUserPaymentInfoRegisterPaymentMethodRequest, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserProfileImage(image: File | null, options?: any): AxiosPromise<PostUserProfileImage200Response> {
            return localVarFp.postUserProfileImage(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary お気に入りスタッフ切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [favoriteId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleFavorite(staffId: number, favoriteId?: number | null, options?: any): AxiosPromise<ToggleFavorite200Response> {
            return localVarFp.toggleFavorite(staffId, favoriteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary いいね切り替え
         * @param {number} staffId スタッフID
         * @param {number | null} [userLikeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleUserLike(staffId: number, userLikeId?: number | null, options?: any): AxiosPromise<ToggleUserLike200Response> {
            return localVarFp.toggleUserLike(staffId, userLikeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GUESTApi - interface
 * @export
 * @interface GUESTApi
 */
export interface GUESTApiInterface {
    /**
     * 
     * @summary 口コミ削除処理
     * @param {number} businessId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    deleteReviewId(businessId: number, reviewId: number, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary 事業者・スタッフチェック
     * @param {number} businessId 
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId: number, staffId: number, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary ランキング表示・非表示更新API
     * @param {PostProfileSettingShowRankingRequest} [postProfileSettingShowRankingRequest] ランキング表示設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    postProfileSettingShowRanking(postProfileSettingShowRankingRequest?: PostProfileSettingShowRankingRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary StripeElementSecretKey取得
     * @param {number} businessId 
     * @param {number} staffId スタッフID
     * @param {PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest} [postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId: number, staffId: number, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest?: PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response>;

    /**
     * 
     * @summary StripeElementSecretKey取得
     * @param {PostUserPaymentInfoCreatePaymentIntentRequest} [postUserPaymentInfoCreatePaymentIntentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest?: PostUserPaymentInfoCreatePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent200Response>;

    /**
     * 
     * @summary stripe会員情報登録
     * @param {PostUserPaymentInfoRegisterPaymentMethodRequest} [postUserPaymentInfoRegisterPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest?: PostUserPaymentInfoRegisterPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    postUserProfileImage(image: File | null, options?: AxiosRequestConfig): AxiosPromise<PostUserProfileImage200Response>;

    /**
     * 
     * @summary お気に入りスタッフ切り替え
     * @param {number} staffId スタッフID
     * @param {number | null} [favoriteId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    toggleFavorite(staffId: number, favoriteId?: number | null, options?: AxiosRequestConfig): AxiosPromise<ToggleFavorite200Response>;

    /**
     * 
     * @summary いいね切り替え
     * @param {number} staffId スタッフID
     * @param {number | null} [userLikeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApiInterface
     */
    toggleUserLike(staffId: number, userLikeId?: number | null, options?: AxiosRequestConfig): AxiosPromise<ToggleUserLike200Response>;

}

/**
 * GUESTApi - object-oriented interface
 * @export
 * @class GUESTApi
 * @extends {BaseAPI}
 */
export class GUESTApi extends BaseAPI implements GUESTApiInterface {
    /**
     * 
     * @summary 口コミ削除処理
     * @param {number} businessId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public deleteReviewId(businessId: number, reviewId: number, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).deleteReviewId(businessId, reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 事業者・スタッフチェック
     * @param {number} businessId 
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId: number, staffId: number, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).getUserGuestBusinessOperatorBusinessIdStaffStaffIdExists(businessId, staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ランキング表示・非表示更新API
     * @param {PostProfileSettingShowRankingRequest} [postProfileSettingShowRankingRequest] ランキング表示設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public postProfileSettingShowRanking(postProfileSettingShowRankingRequest?: PostProfileSettingShowRankingRequest, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).postProfileSettingShowRanking(postProfileSettingShowRankingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary StripeElementSecretKey取得
     * @param {number} businessId 
     * @param {number} staffId スタッフID
     * @param {PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest} [postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId: number, staffId: number, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest?: PostUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntent(businessId, staffId, postUserGuestBusinessOperatorBusinessIdStaffStaffIdCreatePaymentIntentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary StripeElementSecretKey取得
     * @param {PostUserPaymentInfoCreatePaymentIntentRequest} [postUserPaymentInfoCreatePaymentIntentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest?: PostUserPaymentInfoCreatePaymentIntentRequest, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).postUserPaymentInfoCreatePaymentIntent(postUserPaymentInfoCreatePaymentIntentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary stripe会員情報登録
     * @param {PostUserPaymentInfoRegisterPaymentMethodRequest} [postUserPaymentInfoRegisterPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest?: PostUserPaymentInfoRegisterPaymentMethodRequest, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).postUserPaymentInfoRegisterPaymentMethod(postUserPaymentInfoRegisterPaymentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public postUserProfileImage(image: File | null, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).postUserProfileImage(image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary お気に入りスタッフ切り替え
     * @param {number} staffId スタッフID
     * @param {number | null} [favoriteId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public toggleFavorite(staffId: number, favoriteId?: number | null, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).toggleFavorite(staffId, favoriteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary いいね切り替え
     * @param {number} staffId スタッフID
     * @param {number | null} [userLikeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GUESTApi
     */
    public toggleUserLike(staffId: number, userLikeId?: number | null, options?: AxiosRequestConfig) {
        return GUESTApiFp(this.configuration).toggleUserLike(staffId, userLikeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SSRApi - axios parameter creator
 * @export
 */
export const SSRApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Inertiaスタッフプロフィール設定取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrBusinessOperatorStaffStaffIdProfileSetting: async (staffId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('ssrBusinessOperatorStaffStaffIdProfileSetting', 'staffId', staffId)
            const localVarPath = `/business-operator/staff/{staffId}/setting`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信削除
         * @param {number} tipId 投げ銭ID
         * @param {number} replyId 投げ銭返信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrDeleteStaffTipsTipIdReplyId: async (tipId: number, replyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('ssrDeleteStaffTipsTipIdReplyId', 'tipId', tipId)
            // verify required parameter 'replyId' is not null or undefined
            assertParamExists('ssrDeleteStaffTipsTipIdReplyId', 'replyId', replyId)
            const localVarPath = `/staff/tips/{tipId}/{replyId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)))
                .replace(`{${"replyId"}}`, encodeURIComponent(String(replyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフいいね履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffLike: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/like`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaポイント履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffPointHistory: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/point-historiy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffTips: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/tips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴取得
         * @param {number} tipId 投げ銭ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffTipsTipId: async (tipId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('ssrGetStaffTipsTipId', 'tipId', tipId)
            const localVarPath = `/staff/tips/{tipId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信
         * @param {number} tipId 投げ銭ID
         * @param {SsrPostStaffTipsTipIdRequest} [ssrPostStaffTipsTipIdRequest] 応援履歴返信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrPostStaffTipsTipId: async (tipId: number, ssrPostStaffTipsTipIdRequest?: SsrPostStaffTipsTipIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tipId' is not null or undefined
            assertParamExists('ssrPostStaffTipsTipId', 'tipId', tipId)
            const localVarPath = `/staff/tips/{tipId}`
                .replace(`{${"tipId"}}`, encodeURIComponent(String(tipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ssrPostStaffTipsTipIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフマイページ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffMypage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/mypage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfileSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/profile/setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール更新
         * @param {SsrStaffProfileUpdateRequest} [ssrStaffProfileUpdateRequest] スタッフプロフィールリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfileUpdate: async (ssrStaffProfileUpdateRequest?: SsrStaffProfileUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ssrStaffProfileUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SSRApi - functional programming interface
 * @export
 */
export const SSRApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SSRApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Inertiaスタッフプロフィール設定取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrBusinessOperatorStaffStaffIdProfileSetting(staffId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfileSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrBusinessOperatorStaffStaffIdProfileSetting(staffId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrBusinessOperatorStaffStaffIdProfileSetting']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信削除
         * @param {number} tipId 投げ銭ID
         * @param {number} replyId 投げ銭返信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrDeleteStaffTipsTipIdReplyId(tipId: number, replyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTipShow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrDeleteStaffTipsTipIdReplyId(tipId, replyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrDeleteStaffTipsTipIdReplyId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフいいね履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrGetStaffLike(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseLikes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrGetStaffLike(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrGetStaffLike']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaポイント履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrGetStaffPointHistory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePointHistories>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrGetStaffPointHistory(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrGetStaffPointHistory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrGetStaffTips(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTips>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrGetStaffTips(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrGetStaffTips']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴取得
         * @param {number} tipId 投げ銭ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrGetStaffTipsTipId(tipId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTipShow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrGetStaffTipsTipId(tipId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrGetStaffTipsTipId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信
         * @param {number} tipId 投げ銭ID
         * @param {SsrPostStaffTipsTipIdRequest} [ssrPostStaffTipsTipIdRequest] 応援履歴返信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrPostStaffTipsTipId(tipId: number, ssrPostStaffTipsTipIdRequest?: SsrPostStaffTipsTipIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTipShow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrPostStaffTipsTipId(tipId, ssrPostStaffTipsTipIdRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrPostStaffTipsTipId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフマイページ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrStaffMypage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffMyage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrStaffMypage(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrStaffMypage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrStaffProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrStaffProfile(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrStaffProfile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrStaffProfileSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfileSetting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrStaffProfileSetting(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrStaffProfileSetting']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール更新
         * @param {SsrStaffProfileUpdateRequest} [ssrStaffProfileUpdateRequest] スタッフプロフィールリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest?: SsrStaffProfileUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SSRApi.ssrStaffProfileUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SSRApi - factory interface
 * @export
 */
export const SSRApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SSRApiFp(configuration)
    return {
        /**
         * 
         * @summary Inertiaスタッフプロフィール設定取得
         * @param {number} staffId スタッフID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrBusinessOperatorStaffStaffIdProfileSetting(staffId: number, options?: any): AxiosPromise<ResponseStaffProfileSetting> {
            return localVarFp.ssrBusinessOperatorStaffStaffIdProfileSetting(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信削除
         * @param {number} tipId 投げ銭ID
         * @param {number} replyId 投げ銭返信ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrDeleteStaffTipsTipIdReplyId(tipId: number, replyId: number, options?: any): AxiosPromise<ResponseTipShow> {
            return localVarFp.ssrDeleteStaffTipsTipIdReplyId(tipId, replyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフいいね履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffLike(options?: any): AxiosPromise<ResponseLikes> {
            return localVarFp.ssrGetStaffLike(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaポイント履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffPointHistory(options?: any): AxiosPromise<ResponsePointHistories> {
            return localVarFp.ssrGetStaffPointHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffTips(options?: any): AxiosPromise<ResponseTips> {
            return localVarFp.ssrGetStaffTips(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴取得
         * @param {number} tipId 投げ銭ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrGetStaffTipsTipId(tipId: number, options?: any): AxiosPromise<ResponseTipShow> {
            return localVarFp.ssrGetStaffTipsTipId(tipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフ応援履歴返信
         * @param {number} tipId 投げ銭ID
         * @param {SsrPostStaffTipsTipIdRequest} [ssrPostStaffTipsTipIdRequest] 応援履歴返信
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrPostStaffTipsTipId(tipId: number, ssrPostStaffTipsTipIdRequest?: SsrPostStaffTipsTipIdRequest, options?: any): AxiosPromise<ResponseTipShow> {
            return localVarFp.ssrPostStaffTipsTipId(tipId, ssrPostStaffTipsTipIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフマイページ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffMypage(options?: any): AxiosPromise<ResponseStaffMyage> {
            return localVarFp.ssrStaffMypage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfile(options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.ssrStaffProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfileSetting(options?: any): AxiosPromise<ResponseStaffProfileSetting> {
            return localVarFp.ssrStaffProfileSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inertiaスタッフプロフィール更新
         * @param {SsrStaffProfileUpdateRequest} [ssrStaffProfileUpdateRequest] スタッフプロフィールリクエスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest?: SsrStaffProfileUpdateRequest, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SSRApi - interface
 * @export
 * @interface SSRApi
 */
export interface SSRApiInterface {
    /**
     * 
     * @summary Inertiaスタッフプロフィール設定取得
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrBusinessOperatorStaffStaffIdProfileSetting(staffId: number, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfileSetting>;

    /**
     * 
     * @summary Inertiaスタッフ応援履歴返信削除
     * @param {number} tipId 投げ銭ID
     * @param {number} replyId 投げ銭返信ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrDeleteStaffTipsTipIdReplyId(tipId: number, replyId: number, options?: AxiosRequestConfig): AxiosPromise<ResponseTipShow>;

    /**
     * 
     * @summary Inertiaスタッフいいね履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrGetStaffLike(options?: AxiosRequestConfig): AxiosPromise<ResponseLikes>;

    /**
     * 
     * @summary Inertiaポイント履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrGetStaffPointHistory(options?: AxiosRequestConfig): AxiosPromise<ResponsePointHistories>;

    /**
     * 
     * @summary Inertiaスタッフ応援履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrGetStaffTips(options?: AxiosRequestConfig): AxiosPromise<ResponseTips>;

    /**
     * 
     * @summary Inertiaスタッフ応援履歴取得
     * @param {number} tipId 投げ銭ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrGetStaffTipsTipId(tipId: number, options?: AxiosRequestConfig): AxiosPromise<ResponseTipShow>;

    /**
     * 
     * @summary Inertiaスタッフ応援履歴返信
     * @param {number} tipId 投げ銭ID
     * @param {SsrPostStaffTipsTipIdRequest} [ssrPostStaffTipsTipIdRequest] 応援履歴返信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrPostStaffTipsTipId(tipId: number, ssrPostStaffTipsTipIdRequest?: SsrPostStaffTipsTipIdRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseTipShow>;

    /**
     * 
     * @summary Inertiaスタッフマイページ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrStaffMypage(options?: AxiosRequestConfig): AxiosPromise<ResponseStaffMyage>;

    /**
     * 
     * @summary Inertiaスタッフプロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrStaffProfile(options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary Inertiaスタッフプロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrStaffProfileSetting(options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfileSetting>;

    /**
     * 
     * @summary Inertiaスタッフプロフィール更新
     * @param {SsrStaffProfileUpdateRequest} [ssrStaffProfileUpdateRequest] スタッフプロフィールリクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApiInterface
     */
    ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest?: SsrStaffProfileUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

}

/**
 * SSRApi - object-oriented interface
 * @export
 * @class SSRApi
 * @extends {BaseAPI}
 */
export class SSRApi extends BaseAPI implements SSRApiInterface {
    /**
     * 
     * @summary Inertiaスタッフプロフィール設定取得
     * @param {number} staffId スタッフID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrBusinessOperatorStaffStaffIdProfileSetting(staffId: number, options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrBusinessOperatorStaffStaffIdProfileSetting(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフ応援履歴返信削除
     * @param {number} tipId 投げ銭ID
     * @param {number} replyId 投げ銭返信ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrDeleteStaffTipsTipIdReplyId(tipId: number, replyId: number, options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrDeleteStaffTipsTipIdReplyId(tipId, replyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフいいね履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrGetStaffLike(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrGetStaffLike(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaポイント履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrGetStaffPointHistory(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrGetStaffPointHistory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフ応援履歴
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrGetStaffTips(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrGetStaffTips(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフ応援履歴取得
     * @param {number} tipId 投げ銭ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrGetStaffTipsTipId(tipId: number, options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrGetStaffTipsTipId(tipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフ応援履歴返信
     * @param {number} tipId 投げ銭ID
     * @param {SsrPostStaffTipsTipIdRequest} [ssrPostStaffTipsTipIdRequest] 応援履歴返信
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrPostStaffTipsTipId(tipId: number, ssrPostStaffTipsTipIdRequest?: SsrPostStaffTipsTipIdRequest, options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrPostStaffTipsTipId(tipId, ssrPostStaffTipsTipIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフマイページ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrStaffMypage(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrStaffMypage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフプロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrStaffProfile(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrStaffProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフプロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrStaffProfileSetting(options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrStaffProfileSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inertiaスタッフプロフィール更新
     * @param {SsrStaffProfileUpdateRequest} [ssrStaffProfileUpdateRequest] スタッフプロフィールリクエスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSRApi
     */
    public ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest?: SsrStaffProfileUpdateRequest, options?: AxiosRequestConfig) {
        return SSRApiFp(this.configuration).ssrStaffProfileUpdate(ssrStaffProfileUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * STAFFApi - axios parameter creator
 * @export
 */
export const STAFFApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfileImage: async (deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/profile/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBusinessOperatorStaffStaffIdProfileImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileImage: async (image: File | null, order: OrderEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('postProfileImage', 'image', image)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('postProfileImage', 'order', order)
            const localVarPath = `/staff/profile/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (order !== undefined) { 
                localVarFormParams.append('order', order as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 各種設定
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettingMessageNotified: async (postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/staff/setting/message-notified`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * STAFFApi - functional programming interface
 * @export
 */
export const STAFFApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = STAFFApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['STAFFApi.deleteProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProfileImage(image, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['STAFFApi.postProfileImage']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 各種設定
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['STAFFApi.postSettingMessageNotified']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * STAFFApi - factory interface
 * @export
 */
export const STAFFApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = STAFFApiFp(configuration)
    return {
        /**
         * 
         * @summary プロフィール画像削除
         * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール画像登録
         * @param {File | null} image ファイル(画像or動画)
         * @param {OrderEnum} order 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProfileImage(image: File | null, order: OrderEnum, options?: any): AxiosPromise<ResponseStaffProfile> {
            return localVarFp.postProfileImage(image, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 各種設定
         * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: any): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response> {
            return localVarFp.postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * STAFFApi - interface
 * @export
 * @interface STAFFApi
 */
export interface STAFFApiInterface {
    /**
     * 
     * @summary プロフィール画像削除
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApiInterface
     */
    deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApiInterface
     */
    postProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig): AxiosPromise<ResponseStaffProfile>;

    /**
     * 
     * @summary 各種設定
     * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApiInterface
     */
    postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserGuestBusinessOperatorBusinessIdStaffStaffIdExists200Response>;

}

/**
 * STAFFApi - object-oriented interface
 * @export
 * @class STAFFApi
 * @extends {BaseAPI}
 */
export class STAFFApi extends BaseAPI implements STAFFApiInterface {
    /**
     * 
     * @summary プロフィール画像削除
     * @param {DeleteBusinessOperatorStaffStaffIdProfileImageRequest} [deleteBusinessOperatorStaffStaffIdProfileImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApi
     */
    public deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest?: DeleteBusinessOperatorStaffStaffIdProfileImageRequest, options?: AxiosRequestConfig) {
        return STAFFApiFp(this.configuration).deleteProfileImage(deleteBusinessOperatorStaffStaffIdProfileImageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール画像登録
     * @param {File | null} image ファイル(画像or動画)
     * @param {OrderEnum} order 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApi
     */
    public postProfileImage(image: File | null, order: OrderEnum, options?: AxiosRequestConfig) {
        return STAFFApiFp(this.configuration).postProfileImage(image, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 各種設定
     * @param {PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest} [postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest] スタッフ各種設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof STAFFApi
     */
    public postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest?: PostBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options?: AxiosRequestConfig) {
        return STAFFApiFp(this.configuration).postSettingMessageNotified(postBusinessOperatorStaffStaffIdSettingMessageNotifiedRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



